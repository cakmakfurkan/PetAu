#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('survivor:server');
var http = require('http');
var socketIO = require('socket.io');
//const Gpio = require('onoff').Gpio;

/**
 * Get port from environment and store in Express.
 */


var port = normalizePort(process.env.PORT || '5000');
console.log('PORT', port)
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);


//clientten gelen datayi okuyoruz

io.on('connection', function (socket) {
  console.log("Baglanti Kuruldu");
  socket.on('PROCESS', (data) => {
    if(data === 'WATER'){
      console.log("watering");
    }else if(data === 'FEED'){
      console.log("feeding");
    }else if(data === 'HEATER'){
      console.log("heating");
    }
  });
});

//Sensorleri tanimliyoruz

var heatSensor = require("node-dht-sensor");
//const foodSensor = new Gpio(4, 'in', 'both');
//const waterSensor = new Gpio(27, 'in', 'both');


//fake isi sensoru verisi
var temperature = 50;
var humidity = 60;
//fake food level
var food = false;
//fake water level
var water = true;

//Sensorlerden verileri 10 saniyede bir okuyan fonksiyon Ã§ok sik tutulursa clientte donmalar yasanabiliyor !!!

const updateInterval = setInterval(() => {

//3 saniyede bir sensor okunuyor 
//HEAT_SENSOR_UPDATE ile cliente gonderiliyor
/*heatSensor.read(11, 4, function(err, temperature, humidity) {
    if (!err) {
      io.sockets.emit('HEAT_SENSOR_UPDATE', {
        temperature: this.temperature,
        humidity: this.humidity,
      });
      };
});*/

//FOOD_SENSOR_UPDATE ile cliente gonderiliyor
/*foodSensor.watch((err, value) => {
  io.sockets.emit('FOOD_SENSOR_UPDATE', {
  isFull:value
});}
);*/

//WATER_SENSOR_UPDATE ile cliente gonderiliyor
/*waterSensor.watch((err, value) => {
  io.sockets.emit('WATER_SENSOR_UPDATE', {
  isFull:value
});}
);*/


//fake isi sensoru verisi
io.sockets.emit('HEAT_SENSOR_UPDATE', {
  temperature: temperature++,
  humidity: humidity++,
});

//fake mama kabi verisi
io.sockets.emit('FOOD_SENSOR_UPDATE', {
    isFull:food
});

//fake su kabi verisi
io.sockets.emit('WATER_SENSOR_UPDATE', {
  isFull:water
});

},10000);





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
